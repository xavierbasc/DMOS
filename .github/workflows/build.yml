name: Build on Tag

permissions:
  contents: write
  id-token: write
  actions: write

on:
  push:
    tags:
      - '*'  # only tags

jobs:
  build-macos:
    name: Build macOS
    runs-on: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Clone SDL2
        run: git clone --depth=1 --branch release-2.30.9 https://github.com/libsdl-org/SDL.git external/SDL2

      - name: Set Xcode version to 16.1
        run: sudo xcode-select -s /Applications/Xcode_16.1.app/Contents/Developer

      - name: Build binary
        run: |
          xcodebuild -project macos/dm50.xcodeproj \
                    -scheme macOS \
                    -destination 'platform=macOS,arch=x86_64' \
                    -configuration Release \
                    -derivedDataPath ./build/macos \
                    build
          mkdir -p artifacts/macos
          cp -R build/macos/Build/Products/Release/DM50.app artifacts/macos/

      - name: Compress artifacts
        run: |
          cd artifacts/macos
          zip -r DM50-macos.zip DM50.app
          rm -rf DM50.app

      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v3
        with:
          name: macos-artifacts
          path: artifacts/macos/

  build-linux:
    name: Build Linux
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install SDL2
        run: sudo apt-get update && sudo apt-get install -y libsdl2-dev

      - name: Build for Linux
        run: |
          make PLATFORM=linux
          mkdir -p artifacts/linux
          cp dm50/bin/linux/dm50 artifacts/linux/

      - name: Compress artifacts
        run: |
          cd artifacts/linux
          zip -r DM50-linux.zip .
          rm -rf dm50

      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v3
        with:
          name: linux-artifacts
          path: artifacts/linux/

  publish-release:
    name: Publish Release
    needs: [build-macos, build-linux]
    runs-on: ubuntu-latest

    steps:
      - name: DM50 for macOS
        uses: actions/download-artifact@v3
        with:
          name: macos-artifacts
          path: artifacts/macos

      - name: DM50 for Linux (ubuntu)
        uses: actions/download-artifact@v3
        with:
          name: linux-artifacts
          path: artifacts/linux

      - name: Release creation
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG_NAME="${GITHUB_REF#refs/tags/}"
          RELEASE_NAME="Release $TAG_NAME"
          RELEASE_BODY="$TAG_NAME compilation"

          # Create release
          RESPONSE=$(curl -s -X POST \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Content-Type: application/json" \
            -d "{\"tag_name\":\"$TAG_NAME\",\"name\":\"$RELEASE_NAME\",\"body\":\"$RELEASE_BODY\",\"draft\":false,\"prerelease\":false}" \
            https://api.github.com/repos/${GITHUB_REPOSITORY}/releases)

          # ID de la release
          RELEASE_ID=$(echo $RESPONSE | jq -r '.id')

          if [ "$RELEASE_ID" = "null" ]; then
            echo "Error : $RESPONSE"
            exit 1
          fi

          echo "Release ID $RELEASE_ID"

          # Upload artefacts
          for FILE in artifacts/macos/DM50-macos.zip artifacts/linux/DM50-linux.zip; do
            curl -s -X POST \
              -H "Authorization: Bearer $GITHUB_TOKEN" \
              -H "Content-Type: application/zip" \
              --data-binary @"$FILE" \
              "https://uploads.github.com/repos/${GITHUB_REPOSITORY}/releases/$RELEASE_ID/assets?name=$(basename $FILE)"
          done
      